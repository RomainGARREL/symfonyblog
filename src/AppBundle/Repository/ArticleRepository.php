<?php

namespace AppBundle\Repository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository {

    public function getArticleByIdWithLeftJoin($id) {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.commentaires', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.id = ?1')//andWhere('a.id = ?2')
                ->setParameter(1, $id)//->setParameter(2, $date) c'est deux lignes pour explique why ?1
                ->orderBy('a.date', 'DESC');
        //
        $querry = $qb->getQuery();
        $article = $querry->getOneOrNullResult(); // equivalent d'un fetch
        return $article;
    }

    public function getdArticlesByPublicationWithLeftJoin() {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.commentaires', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.publication = 1')
                ->orderBy('a.date', 'DESC');
        //
        $querry = $qb->getQuery();
        $article = $querry->getResult(); // equivalent d'un fetch
        return $article;
    }

    public function getdArticlesWithJoinAndWithPagination($offset, $limit) {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('a.publication = true')
                ->orderBy('a.date', 'DESC')
                ->setFirstResult($offset)
                ->setMaxResults($limit)
        ;

        $query = $qb->getQuery();
        return new \Doctrine\ORM\Tools\Pagination\Paginator($query);
    }

    public function getArticlesByTagWithLeftJoin($id) {
        $qb = $this->createQueryBuilder('a');
        $qb->leftJoin('a.image', 'i')
                ->addSelect('i')
                ->leftJoin('a.commentaires', 'c')
                ->addSelect('c')
                ->leftJoin('a.tags', 't')
                ->addSelect('t')
                ->where('t.id = ?1')//andWhere('a.id = ?2')
                ->setParameter(1, $id)//->setParameter(2, $date) c'est deux lignes pour explique why ?1
                ->orderBy('a.date', 'DESC');
        //
        $querry = $qb->getQuery();
        $articles = $querry->getArrayResult(); // equivalent d'un fetch
        return $articles;
    }

    // Warning Function below probably in the wrong place
    public function getNumberOfArticlesByTagWithLeftJoin($id) {
        $qb = $this->createQueryBuilder('a');
        $qb->select('count(a)')
                ->leftJoin('a.tags', 't')
                ->where('t.id = ?1')//andWhere('a.id = ?2')
                ->setParameter(1, $id); //->setParameter(2, $date) c'est deux lignes pour explique why ?1
        //
        $querry = $qb->getQuery();
        $numberOfArticles = $querry->getSingleScalarResult();
        // equivalent d'un fetch
        return $numberOfArticles;
    }

    // Useless Method, just here to practice as we get back to work.
    // Purpose of this method, to display the last 3 articles published in the footer
    public function getLastThreeArticlesByDateWithLeftJoin($limit) {
        $qb = $this->createQueryBuilder('a');
        $qb
                //->where('a.publication = 1')
                ->orderBy('a.date', 'DESC')
                ->setMaxResults($limit);
        //
        $querry = $qb->getQuery();
        $article = $querry->getResult(); // equivalent d'un fetch
        return $article;
    }

    public function getYears($limit = 5) {
        if ((int) $limit) {
            return $this->createQueryBuilder('a')
                            ->select('SUBSTRING(a.date,1,4)')
                            ->distinct()
                            ->orderBy('a.date', 'DESC')
                            ->setMaxResults($limit)
                            ->getQuery()
                            ->getResult();
        }
        return null;
    }

    public function getYearArticles($year) {
        $year_begin = $year . '-01-01';
        $year_end = $year . '-12-31';
        $qb = $this->createQueryBuilder('a');
        $qb
                ->where('a.date >= ?1 AND a.date <= ?2 ')
                ->setParameter(1, $year_begin)
                ->setParameter(2, $year_end);
        $querry = $qb->getQuery();
        $article = $querry->getResult();
        //dump($article);
        return $article;
    }

}
